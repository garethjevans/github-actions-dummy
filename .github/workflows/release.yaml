name: Release

on:
  release:
    types: [created]

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
     
      - name: Prepare
        id: prep
        run: |
          git fetch --tags

          VERSION=${GITHUB_REF#refs/tags/}
          MAJOR_VERSION=$(echo $VERSION | sed 's/\.[[:digit:]]\+\.[[:digit:]]\+$//')
          TEST_CHECK=$(echo $VERSION | sed 's/^v[[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+$/xxx/')

          if [ "$TEST_CHECK" != "xxx" ];
            echo "Version $VERSION does not match expected format vMAJOR.MINOR.PATCH"
            exit 1
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "majorversion=${MAJOR_VERSION}" >> $GITHUB_OUTPUT
          echo "image=ghcr.io/${{ github.repository }}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Packages
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ steps.prep.outputs.image }}:${{ steps.prep.outputs.version }}
          platforms: linux/amd64
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ github.event.release.tag_name }}

      - name: Local Branch
        run: |
          git switch -c ${{ steps.prep.outputs.version }}

      - name: Update action.yml
        run: |
          sed -i "s|image: .*|image: 'docker://${{ steps.prep.outputs.image }}:${{ steps.prep.outputs.version }}'|"  action.yml
          git diff

      - name: Validate
        run: |
          DOCKER_IMAGE=$(cat action.yml | yq .runs.image | sed 's|docker://||')
          docker pull $DOCKER_IMAGE

      - name: Update tag
        run: |
          RELEASE=$(gh api /repos/$GITHUB_REPOSITORY/releases/tags/${{ steps.prep.outputs.version }} | jq '.id')
          git config --global user.email "${GIT_COMMITTER_EMAIL}"
          git config --global user.name "${GIT_COMMITTER_NAME}"
          git add action.yml
          git commit -m "chore: update action.yml reference to ${{ steps.prep.outputs.version }}"
          COMMIT=$(git rev-parse --short HEAD)
          echo "Current commit is ${COMMIT}"
          echo "Deleting Tag ${{ steps.prep.outputs.version }}"
          git push origin :${{ steps.prep.outputs.version }}
          echo "Retagging ${{ steps.prep.outputs.version }}"
          git tag -f -a ${{ steps.prep.outputs.version }} -m "${{ steps.prep.outputs.version }}" ${COMMIT}
          echo "Pushing Updating Tag"
          git push origin refs/tags/${{ steps.prep.outputs.version }}
          gh api -X PATCH -F draft=false -F sha=$COMMIT /repos/$GITHUB_REPOSITORY/releases/$RELEASE
         
          if [ $(git tag -l "${{ steps.prep.outputs.majorversion }}") ]; then
            echo "Deleting Tag ${{ steps.prep.outputs.majorversion }}"
            git push origin :${{ steps.prep.outputs.majorversion }}
          fi 
          echo "(Re)tagging ${{ steps.prep.outputs.majorversion }}"
          git tag -f -a ${{ steps.prep.outputs.majorversion }} -m "${{ steps.prep.outputs.majorversion }}" ${COMMIT}
          echo "Pushing Updating Tag"
          git push origin refs/tags/${{ steps.prep.outputs.majorversion }}
        env:
          GIT_COMMITTER_NAME: ${{ github.actor }}
          GIT_COMMITTER_EMAIL: ${{ github.actor }}@users.noreply.github.com
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
